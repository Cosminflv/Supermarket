//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Supermarket
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SupermarketEntities : DbContext
    {
        public SupermarketEntities()
            : base("name=SupermarketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<BonuriCasa> BonuriCasas { get; set; }
        public DbSet<Categorii> Categoriis { get; set; }
        public DbSet<DetaliiBon> DetaliiBons { get; set; }
        public DbSet<Producatori> Producatoris { get; set; }
        public DbSet<Produse> Produses { get; set; }
        public DbSet<Stocuri> Stocuris { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<Utilizatori> Utilizatoris { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> AddBonCasa(Nullable<System.DateTime> dataEliberarii, Nullable<int> utilizatorID, Nullable<decimal> sumaIncasata)
        {
            var dataEliberariiParameter = dataEliberarii.HasValue ?
                new ObjectParameter("DataEliberarii", dataEliberarii) :
                new ObjectParameter("DataEliberarii", typeof(System.DateTime));
    
            var utilizatorIDParameter = utilizatorID.HasValue ?
                new ObjectParameter("UtilizatorID", utilizatorID) :
                new ObjectParameter("UtilizatorID", typeof(int));
    
            var sumaIncasataParameter = sumaIncasata.HasValue ?
                new ObjectParameter("SumaIncasata", sumaIncasata) :
                new ObjectParameter("SumaIncasata", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddBonCasa", dataEliberariiParameter, utilizatorIDParameter, sumaIncasataParameter);
        }
    
        public virtual int AddCategory(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCategory", categoryNameParameter);
        }
    
        public virtual int AddDetaliuBon(Nullable<int> bonID, Nullable<int> produsID, Nullable<int> cantitate)
        {
            var bonIDParameter = bonID.HasValue ?
                new ObjectParameter("BonID", bonID) :
                new ObjectParameter("BonID", typeof(int));
    
            var produsIDParameter = produsID.HasValue ?
                new ObjectParameter("ProdusID", produsID) :
                new ObjectParameter("ProdusID", typeof(int));
    
            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("Cantitate", cantitate) :
                new ObjectParameter("Cantitate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDetaliuBon", bonIDParameter, produsIDParameter, cantitateParameter);
        }
    
        public virtual int AddProducer(string producerName, string country)
        {
            var producerNameParameter = producerName != null ?
                new ObjectParameter("ProducerName", producerName) :
                new ObjectParameter("ProducerName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProducer", producerNameParameter, countryParameter);
        }
    
        public virtual int AddProduct(string productName, string barcode, Nullable<int> categoryID, Nullable<int> producerID)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var producerIDParameter = producerID.HasValue ?
                new ObjectParameter("ProducerID", producerID) :
                new ObjectParameter("ProducerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct", productNameParameter, barcodeParameter, categoryIDParameter, producerIDParameter);
        }
    
        public virtual int AddStock(Nullable<int> produsID, Nullable<decimal> cantitate, string unitateMasura, Nullable<System.DateTime> dataAprovizionare, Nullable<System.DateTime> dataExpirare, Nullable<decimal> pretAchizitie, Nullable<bool> isActive, Nullable<decimal> pretVanzare)
        {
            var produsIDParameter = produsID.HasValue ?
                new ObjectParameter("ProdusID", produsID) :
                new ObjectParameter("ProdusID", typeof(int));
    
            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("Cantitate", cantitate) :
                new ObjectParameter("Cantitate", typeof(decimal));
    
            var unitateMasuraParameter = unitateMasura != null ?
                new ObjectParameter("UnitateMasura", unitateMasura) :
                new ObjectParameter("UnitateMasura", typeof(string));
    
            var dataAprovizionareParameter = dataAprovizionare.HasValue ?
                new ObjectParameter("DataAprovizionare", dataAprovizionare) :
                new ObjectParameter("DataAprovizionare", typeof(System.DateTime));
    
            var dataExpirareParameter = dataExpirare.HasValue ?
                new ObjectParameter("DataExpirare", dataExpirare) :
                new ObjectParameter("DataExpirare", typeof(System.DateTime));
    
            var pretAchizitieParameter = pretAchizitie.HasValue ?
                new ObjectParameter("PretAchizitie", pretAchizitie) :
                new ObjectParameter("PretAchizitie", typeof(decimal));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pretVanzareParameter = pretVanzare.HasValue ?
                new ObjectParameter("PretVanzare", pretVanzare) :
                new ObjectParameter("PretVanzare", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStock", produsIDParameter, cantitateParameter, unitateMasuraParameter, dataAprovizionareParameter, dataExpirareParameter, pretAchizitieParameter, isActiveParameter, pretVanzareParameter);
        }
    
        public virtual int AddUser(string userName, string password, string userType)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", userNameParameter, passwordParameter, userTypeParameter);
        }
    
        public virtual int DeactivateCategory(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateCategory", categoryIDParameter);
        }
    
        public virtual int DeactivateExpiredStock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateExpiredStock");
        }
    
        public virtual int DeactivateProducer(Nullable<int> producerID)
        {
            var producerIDParameter = producerID.HasValue ?
                new ObjectParameter("ProducerID", producerID) :
                new ObjectParameter("ProducerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateProducer", producerIDParameter);
        }
    
        public virtual int DeactivateProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateProduct", productIDParameter);
        }
    
        public virtual int DeactivateStoc(Nullable<int> stocID)
        {
            var stocIDParameter = stocID.HasValue ?
                new ObjectParameter("StocID", stocID) :
                new ObjectParameter("StocID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateStoc", stocIDParameter);
        }
    
        public virtual int DeactivateUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateUser", userIDParameter);
        }
    
        public virtual ObjectResult<SelectBonuriCasa_Result> SelectBonuriCasa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectBonuriCasa_Result>("SelectBonuriCasa");
        }
    
        public virtual ObjectResult<SelectDetaliiBon_Result> SelectDetaliiBon(Nullable<int> bonID)
        {
            var bonIDParameter = bonID.HasValue ?
                new ObjectParameter("BonID", bonID) :
                new ObjectParameter("BonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectDetaliiBon_Result>("SelectDetaliiBon", bonIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SubtractQuantity(Nullable<int> stocID, Nullable<int> subtractValue)
        {
            var stocIDParameter = stocID.HasValue ?
                new ObjectParameter("StocID", stocID) :
                new ObjectParameter("StocID", typeof(int));
    
            var subtractValueParameter = subtractValue.HasValue ?
                new ObjectParameter("SubtractValue", subtractValue) :
                new ObjectParameter("SubtractValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubtractQuantity", stocIDParameter, subtractValueParameter);
        }
    
        public virtual int UpdateCategory(Nullable<int> categoryID, string categoryName, Nullable<bool> isActive)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCategory", categoryIDParameter, categoryNameParameter, isActiveParameter);
        }
    
        public virtual int UpdateProducer(Nullable<int> producerID, string producerName, string country, Nullable<bool> isActive)
        {
            var producerIDParameter = producerID.HasValue ?
                new ObjectParameter("ProducerID", producerID) :
                new ObjectParameter("ProducerID", typeof(int));
    
            var producerNameParameter = producerName != null ?
                new ObjectParameter("ProducerName", producerName) :
                new ObjectParameter("ProducerName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProducer", producerIDParameter, producerNameParameter, countryParameter, isActiveParameter);
        }
    
        public virtual int UpdateProduct(Nullable<int> productID, string productName, string barcode, Nullable<int> categoryID, Nullable<int> producerID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var producerIDParameter = producerID.HasValue ?
                new ObjectParameter("ProducerID", producerID) :
                new ObjectParameter("ProducerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduct", productIDParameter, productNameParameter, barcodeParameter, categoryIDParameter, producerIDParameter);
        }
    
        public virtual int UpdateStockQuantity(Nullable<int> productID, Nullable<int> quantitySold)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantitySoldParameter = quantitySold.HasValue ?
                new ObjectParameter("QuantitySold", quantitySold) :
                new ObjectParameter("QuantitySold", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStockQuantity", productIDParameter, quantitySoldParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> userID, string userName, string password, string userType, Nullable<bool> isActive)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", userIDParameter, userNameParameter, passwordParameter, userTypeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<ViewCategories_Result> ViewCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewCategories_Result>("ViewCategories");
        }
    
        public virtual ObjectResult<ViewLargestDailyReceipt_Result> ViewLargestDailyReceipt(Nullable<System.DateTime> selectedDate)
        {
            var selectedDateParameter = selectedDate.HasValue ?
                new ObjectParameter("SelectedDate", selectedDate) :
                new ObjectParameter("SelectedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewLargestDailyReceipt_Result>("ViewLargestDailyReceipt", selectedDateParameter);
        }
    
        public virtual ObjectResult<ViewProducers_Result> ViewProducers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewProducers_Result>("ViewProducers");
        }
    
        public virtual ObjectResult<ViewProducts_Result> ViewProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewProducts_Result>("ViewProducts");
        }
    
        public virtual ObjectResult<ViewUsers_Result> ViewUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewUsers_Result>("ViewUsers");
        }
    
        public virtual ObjectResult<ViewUserSalesByDay_Result> ViewUserSalesByDay(Nullable<int> userID, Nullable<int> month, Nullable<int> year)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewUserSalesByDay_Result>("ViewUserSalesByDay", userIDParameter, monthParameter, yearParameter);
        }
    }
}
